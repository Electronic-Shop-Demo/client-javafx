plugins {
    id 'java'
    id 'org.openjfx.javafxplugin' version '0.0.12'
    id 'checkstyle'
}

final def versionPattern = $/(\d+)\.(\d+)\.(\d+)(-(\w+)\.(\d+))?/$
final def isCI = System.getenv("CI") == "true"
final def versionFile = new File('.version')

allprojects {
    group 'com.mairwunnx'
    version '1.0.0'

    java {
        modularity.inferModulePath.set(true)
        toolchain {
            languageVersion = JavaLanguageVersion.of 18
            if (isCI) {
                vendor = JvmVendorSpec.AZUL
            } else {
                vendor = JvmVendorSpec.ORACLE
            }
        }
    }

    test {
        useJUnitPlatform()
    }

    tasks.withType(JavaCompile) {
        options.encoding = 'UTF-8'
        options.compilerArgs += "--enable-preview"
        options.fork = true
        options.failOnError = false
        options.debug = false
        options.release = 18
    }

    tasks.withType(Test) {
        jvmArgs += "--enable-preview"
    }

    tasks.withType(Checkstyle) {
        reports {
            xml.required = false
            html.required = true
            html.stylesheet resources.text.fromFile('config/xsl/checkstyle.xsl')
        }
    }
}

if (isCI) {
    if (versionFile.exists() && versionFile.isFile()) {
        final def versionLine = versionFile.readLines()[0] as String
        final def versionCandidateMather = versionLine =~ versionPattern
        final def versionMather = version.toString() =~ versionPattern

        final def majorCandidate = versionCandidateMather[0][1]
        final def minorCandidate = versionCandidateMather[0][2]
        final def pathCandidate = versionCandidateMather[0][3]

        final def major = versionMather[0][1]
        final def minor = versionMather[0][2]
        final def path = versionMather[0][3]

        boolean versionMismatch = false

        if (majorCandidate != major) versionMismatch = true
        if (minorCandidate != minor) versionMismatch = true
        if (pathCandidate != path) versionMismatch = true

        if (versionMismatch) {
            versionFile.write "${version}-SNAPSHOT.1"
        } else {
            final def typeNumber = versionCandidateMather[0][6]
            final def intTypeNumber = Integer.parseInt(typeNumber) + 1
            versionFile.write "${version}-SNAPSHOT.${intTypeNumber.intValue().toString()}"
        }
    } else {
        versionFile.createNewFile()
        versionFile.write "${version}-SNAPSHOT.1"
    }
}
