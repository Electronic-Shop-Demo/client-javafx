plugins {
    id 'java'
    id 'application'
    id 'org.openjfx.javafxplugin' version '0.0.10'
    id 'org.beryx.jlink' version '2.24.1'
    id "io.freefair.lombok" version "6.4.1"
    id 'checkstyle'
}

group 'com.mairwunnx'
version '1.0.0'

ext {
    junitVersion = '5.8.2'
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(18)
        vendor = JvmVendorSpec.ORACLE
    }
}

application {
    mainModule = 'com.mairwunnx.application'
    mainClass = 'com.mairwunnx.application.EntryPoint'
}

javafx {
    version = '18'
    modules = ['javafx.controls', 'javafx.fxml']
}

test {
    useJUnitPlatform()
}

jlink {
    imageZip = project.file("${buildDir}/distributions/app-${javafx.platform.classifier}.zip")
    options = ['--strip-debug', '--compress', '2', '--no-header-files', '--no-man-pages']
    launcher {
        name = 'app'
    }
}

jlinkZip {
    group = 'distribution'
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
    options.compilerArgs += "--enable-preview"
}

tasks.withType(Test) {
    jvmArgs += "--enable-preview"
}

tasks.withType(Checkstyle) {
    reports {
        xml.required = false
        html.required = true
        html.stylesheet resources.text.fromFile('config/xsl/checkstyle.xsl')
    }
}

dependencies {
    implementation(libs.bundles.jetbrains)
    implementation(libs.bundles.fxControls)
    implementation(libs.bundles.fxForms) {
        exclude(group: 'org.openjfx')
    }
    implementation(libs.bundles.lombok)
    implementation(libs.bundles.mapstruct)
    implementation(libs.bundles.jackson)

    annotationProcessor(libs.bundles.lombok)
    annotationProcessor(libs.bundles.mapstructProcessor)

    testCompileOnly(libs.bundles.lombok)
    testCompileOnly(libs.bundles.mapstructProcessor)

    testAnnotationProcessor(libs.bundles.lombok)
    testAnnotationProcessor(libs.bundles.mapstructProcessor)

    testImplementation(libs.bundles.jupiterApi)
    testRuntimeOnly(libs.bundles.jupiterEngine)

    implementation(project('dto')) { transitive(false) }
    implementation(project('models')) { transitive(false) }
}
