plugins {
    id 'java'
    id 'org.openjfx.javafxplugin' version '0.0.13'
    id 'org.javamodularity.moduleplugin' version '1.8.15' apply false
    id 'checkstyle'
}

final def versionPattern = '(\\d+)\\.(\\d+)\\.(\\d+)(-(\\w+)\\.(\\d+))?'
final def isCI = System.getenv('CI') == 'true'
final def versionFile = new File('.version')

tasks.register('allTests') {
    dependsOn(allprojects.stream().map({ it.path + ':test' }).toList())
}

tasks.register('allCheckstyles') {
    dependsOn(allprojects.stream().map({ it.path + ':check' }).toList())
}

allprojects {
    apply plugin: 'java'
    apply plugin: 'org.javamodularity.moduleplugin'

    group 'com.mairwunnx'
    version '1.0.0'

    check.dependsOn checkstyleMain

    java {
        toolchain {
            languageVersion = JavaLanguageVersion.of 18
            if (isCI) {
                vendor = JvmVendorSpec.AZUL
            } else {
                vendor = JvmVendorSpec.ORACLE
            }
        }
    }

    test {
        useJUnitPlatform()

        testLogging {
            exceptionFormat = 'full'
        }
    }

    tasks.withType(JavaCompile) {
        options.encoding = 'UTF-8'
        options.compilerArgs += '--enable-preview'
        options.fork = true
        options.failOnError = false
        options.debug = false
    }

    tasks.withType(Test) {
        jvmArgs += '--enable-preview'
    }

    tasks.withType(Checkstyle) {
        reports {
            xml.required = false
            html.required = true
            html.stylesheet resources.text.fromFile('config/xsl/checkstyle.xsl')
        }
    }
}

if (isCI) {
    if ('true' != System.getProperty('version.upscaled')) {
        System.setProperty('version.upscaled', 'true')

        if (versionFile.exists() && versionFile.isFile()) {
            final def versionLine = versionFile.readLines()[0] as String
            final def versionCandidateMather = versionLine =~ versionPattern
            final def versionMather = version.toString() =~ versionPattern

            final def majorCandidate = versionCandidateMather[0][1]
            final def minorCandidate = versionCandidateMather[0][2]
            final def pathCandidate = versionCandidateMather[0][3]

            final def major = versionMather[0][1]
            final def minor = versionMather[0][2]
            final def path = versionMather[0][3]

            boolean versionMismatch = false

            if (majorCandidate != major) versionMismatch = true
            if (minorCandidate != minor) versionMismatch = true
            if (pathCandidate != path) versionMismatch = true

            if (versionMismatch) {
                versionFile.write "${version}-SNAPSHOT.1"
            } else {
                final def typeNumber = versionCandidateMather[0][6]
                final def intTypeNumber = Integer.parseInt(typeNumber) + 1
                versionFile.write "${version}-SNAPSHOT.${intTypeNumber.intValue().toString()}"
            }
        } else {
            versionFile.createNewFile()
            versionFile.write "${version}-SNAPSHOT.1"
        }
    }

    System.setProperty('version.upscaled', 'true')
}
