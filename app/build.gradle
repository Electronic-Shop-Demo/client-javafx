import org.gradle.nativeplatform.platform.internal.DefaultNativePlatform

plugins {
    id 'java'
    id 'org.openjfx.javafxplugin' version '0.0.13'
    id 'io.freefair.lombok' version '6.4.3'
    id 'application'
    id 'org.beryx.runtime' version '1.12.7'
}

final def currentOS = DefaultNativePlatform.getCurrentOperatingSystem()
final def name = 'Electronic Shop'
final def vendor = 'Pavel Erokhin'

run.environment += ["com.mairwunnx.application.debug": true]

application {
    mainClass = 'com.mairwunnx.application.ZygoteInit'
    applicationName = name

    if (currentOS.isMacOsX()) {
        applicationDefaultJvmArgs += ['-Dsun.java2d.metal=true']
    }
}

javafx {
    version = '18'
    modules = ['javafx.controls', 'javafx.fxml']
}

runtime {
    options = ['--strip-debug', '--compress', '2', '--no-header-files', '--no-man-pages']
    modules = ['java.base', 'jdk.crypto.cryptoki', 'jdk.crypto.ec', 'java.se', 'jdk.unsupported', 'java.xml']

    launcher {
        noConsole = false
    }

    jpackage {
        installerOptions += ['--resource-dir', 'src/main/resources']
        installerOptions += ['--vendor', vendor]

        if (currentOS.windows) {
            installerOptions += ['--win-per-user-install', '--win-dir-chooser', '--win-menu', '--win-shortcut']
        } else if (currentOS.linux) {
            installerOptions += ['--linux-package-name', name, '--linux-shortcut']
        } else if (currentOS.macOsX) {
            installerOptions += ['--mac-package-name', name]
        }
    }
}

dependencies {
    implementation(libs.bundles.jetbrains)
    implementation(libs.bundles.fxControls) { exclude group: 'org.openjfx' }
    implementation(libs.bundles.fxForms) { exclude group: 'org.openjfx' }
    implementation(libs.bundles.lombok)
    implementation(libs.bundles.mapstruct)
    implementation(libs.bundles.jackson)
    implementation(libs.bundles.log4j2)
    implementation(libs.bundles.apacheCommons)
    implementation(libs.bundles.guice)
    implementation(libs.bundles.javax)

    annotationProcessor(libs.bundles.lombok)
    annotationProcessor(libs.bundles.mapstructProcessor)

    testCompileOnly(libs.bundles.lombok)
    testCompileOnly(libs.bundles.mapstructProcessor)

    testAnnotationProcessor(libs.bundles.lombok)
    testAnnotationProcessor(libs.bundles.mapstructProcessor)

    testImplementation(libs.bundles.javaAssert)
    testImplementation(libs.bundles.fxTest)
    testImplementation(libs.bundles.jupiterApi)
    testRuntimeOnly(libs.bundles.jupiterEngine)

    implementation(project(':dto')) { transitive false }
    implementation(project(':models')) { transitive false }
    implementation(project(':ui-navigation')) { transitive false }
    implementation(project(':ui-preferences')) { transitive false }
    implementation(project(':ui-commons')) { transitive false }
    implementation(project(':ui-annotations')) { transitive false }
    implementation(project(':ui-lib')) { transitive false }
    implementation(project(':ui-di-qualifiers')) { transitive false }
}

test {
    useJUnitPlatform()
}

