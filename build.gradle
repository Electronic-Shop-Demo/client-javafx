import org.gradle.nativeplatform.platform.internal.DefaultNativePlatform

plugins {
    id 'java'
    id 'application'
    id 'org.openjfx.javafxplugin' version '0.0.12'
    id 'org.beryx.jlink' version '2.25.0'
    id "io.freefair.lombok" version "6.4.1"
    id 'checkstyle'
}

final def versionPattern = $/(\d+)\.(\d+)\.(\d+)(-(\w+)\.(\d+))?/$
final def currentOS = DefaultNativePlatform.getCurrentOperatingSystem()
final def isCI = System.getenv("CI") == "true"
final def versionFile = new File('.version')

allprojects {
    group 'com.mairwunnx'
    version '1.0.0'

    java {
        modularity.inferModulePath.set(true)
        toolchain {
            languageVersion = JavaLanguageVersion.of 18
            if (isCI) {
                vendor = JvmVendorSpec.AZUL
            } else {
                vendor = JvmVendorSpec.ORACLE
            }
        }
    }

    test {
        useJUnitPlatform()
    }

    tasks.withType(JavaCompile) {
        options.encoding = 'UTF-8'
        options.compilerArgs += "--enable-preview"
        options.fork = true
        options.failOnError = false
        options.debug = false
        options.release = 18
    }

    tasks.withType(Test) {
        jvmArgs += "--enable-preview"
    }
}

application {
    mainModule = 'com.mairwunnx.application'
    mainClass = 'com.mairwunnx.application.ZygoteInit'

    if (currentOS.isMacOsX()) {
        applicationDefaultJvmArgs = listOf("-Dsun.java2d.metal=true")
    }
}

javafx {
    version = '18'
    modules = ['javafx.controls', 'javafx.fxml']
}

jlink {
    imageZip = project.file "${buildDir}/distributions/app-${javafx.platform.classifier}.zip"
    options = ['--strip-debug', '--compress', '2', '--no-header-files', '--no-man-pages']
    forceMerge 'jackson', 'log4j'
    launcher {
        name = 'app'
    }
}

jlinkZip {
    group = 'distribution'
}

tasks.withType(Checkstyle) {
    reports {
        xml.required = false
        html.required = true
        html.stylesheet resources.text.fromFile('config/xsl/checkstyle.xsl')
    }
}

dependencies {
    implementation(libs.bundles.jetbrains)
    implementation(libs.bundles.fxControls) { exclude group: 'org.openjfx' }
    implementation(libs.bundles.fxForms) { exclude group: 'org.openjfx' }
    implementation(libs.bundles.lombok)
    implementation(libs.bundles.mapstruct)
    implementation(libs.bundles.jackson)
    implementation(libs.bundles.log4j2)
    implementation(libs.bundles.apacheCommons)
    implementation(libs.bundles.guice)

    annotationProcessor(libs.bundles.lombok)
    annotationProcessor(libs.bundles.mapstructProcessor)

    testCompileOnly(libs.bundles.lombok)
    testCompileOnly(libs.bundles.mapstructProcessor)

    testAnnotationProcessor(libs.bundles.lombok)
    testAnnotationProcessor(libs.bundles.mapstructProcessor)

    testImplementation(libs.bundles.javaAssert)
    testImplementation(libs.bundles.fxTest)
    testImplementation(libs.bundles.jupiterApi)
    testRuntimeOnly(libs.bundles.jupiterEngine)

    implementation(project('dto')) { transitive false }
    implementation(project('models')) { transitive false }
    implementation(project('ui-navigation')) { transitive false }
    implementation(project('ui-preferences')) { transitive false }
    implementation(project('ui-commons')) { transitive false }
    implementation(project('ui-annotations')) { transitive false }
    implementation(project('ui-lib')) { transitive false }
}

if (isCI) {
    if (versionFile.exists() && versionFile.isFile()) {
        final def versionLine = versionFile.readLines()[0] as String
        final def versionCandidateMather = versionLine =~ versionPattern
        final def versionMather = version.toString() =~ versionPattern

        final def majorCandidate = versionCandidateMather[0][1]
        final def minorCandidate = versionCandidateMather[0][2]
        final def pathCandidate = versionCandidateMather[0][3]

        final def major = versionMather[0][1]
        final def minor = versionMather[0][2]
        final def path = versionMather[0][3]

        boolean versionMismatch = false

        if (majorCandidate != major) versionMismatch = true
        if (minorCandidate != minor) versionMismatch = true
        if (pathCandidate != path) versionMismatch = true

        if (versionMismatch) {
            versionFile.write "${version}-SNAPSHOT.1"
        } else {
            final def typeNumber = versionCandidateMather[0][6]
            final def intTypeNumber = Integer.parseInt(typeNumber) + 1
            versionFile.write "${version}-SNAPSHOT.${intTypeNumber.intValue().toString()}"
        }
    } else {
        versionFile.createNewFile()
        versionFile.write "${version}-SNAPSHOT.1"
    }
}
